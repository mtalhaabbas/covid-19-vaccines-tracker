{"version":3,"sources":["InfoBox.js","Table.js","util.js","Map.js","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","date","total","active","isRed","props","console","log","Card","onClick","className","CardContent","Typography","color","gutterBottom","Table","countries","map","country","numeral","cases","format","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","Map","casesType","center","zoom","TileLayer","url","Circle","countryInfo","lat","long","fillColor","fillOpacity","radius","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","useState","setInputCountry","setdate","settotal","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","mapZoom","useEffect","fetch","then","response","json","Object","keys","values","name","value","iso2","getCountriesData","onCountryChange","e","countryCode","target","timeline","FormControl","Select","variant","onChange","MenuItem","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.8817901b.chunk.js","sourcesContent":["import React from \"react\";\nimport { Card, CardContent, Typography } from \"@material-ui/core\";\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, date, total, active, isRed, ...props }) {\n  console.log(title, active);\n  return (\n    <Card\n      onClick={props.onClick}\n      className={`infoBox ${active && \"infoBox--selected\"} ${\n        isRed && \"infoBox--red\"\n      }`}\n    >\n      <CardContent>\n        <Typography color=\"textSecondary\" gutterBottom>\n          {title}\n        </Typography>\n        <h2 className={`infoBox__cases ${!isRed && \"infoBox__cases--green\"}`}>\n          Total: {total}\n        </h2>\n\n        <Typography className=\"infoBox__total\" color=\"textSecondary\">\n          Last Updated: {date}\n        </Typography>\n      </CardContent>\n    </Card>\n  );\n}\n\nexport default InfoBox;\n","import React from \"react\";\nimport \"./Table.css\";\nimport numeral from \"numeral\";\n\nfunction Table({ countries }) {\n  return (\n    <div className=\"table\">\n      {countries.map((country) => (\n        <tr>\n          <td>{country.country}</td>\n          <td>\n            <strong>{numeral(country.cases).format(\"0,0\")}</strong>\n          </td>\n        </tr>\n      ))}\n    </div>\n  );\n}\n\nexport default Table;\n","import React from \"react\";\nimport numeral from \"numeral\";\nimport { Circle, Popup } from \"react-leaflet\";\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\nexport const sortData = (data) => {\n  let sortedData = [...data];\n  sortedData.sort((a, b) => {\n    if (a.cases > b.cases) {\n      return -1;\n    } else {\n      return 1;\n    }\n  });\n  return sortedData;\n};\n\nexport const prettyPrintStat = (stat) =>\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\n\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div className=\"info-container\">\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n","import React from \"react\";\nimport { Map as LeafletMap, TileLayer } from \"react-leaflet\";\nimport \"./Map.css\";\nimport { showDataOnMap } from \"./util\";\n\nfunction Map({ countries, casesType, center, zoom }) {\n  return (\n    <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n  );\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport Table from \"./Table\";\nimport { sortData } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [date, setdate] = useState(\"\");\n  const [total, settotal] = useState(\"\");\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n  \n      fetch('https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1').then((response) => response.json()).then((data) => {\n        setdate(Object.keys(data)[0])\n        settotal(Object.values(data)[0])\n     });\n\n  }, []);\n\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        \n        });\n    };\n\n    getCountriesData();\n    \n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/vaccine/coverage?lastdays=1\"\n        : `https://disease.sh/v3/covid-19/vaccine/coverage/countries/${countryCode}?lastdays=1`;\n         await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        if(countryCode===\"worldwide\"){\n         setdate(Object.keys(data)[0])\n         settotal(Object.values(data)[0])\n        }\n        else{\n          setdate(Object.keys(data.timeline)[0])\n         settotal(Object.values(data.timeline)[0])\n        }        \n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Vaccines</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n         \n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Total Vaccination\"\n            active={casesType === \"deaths\"}\n            date={date}\n            total={numeral(total).format(\"0.0a\")}\n          />\n        </div>\n\n        \n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n          \n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}